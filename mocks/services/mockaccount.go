// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mikolajsemeniuk/Supreme-Go/services (interfaces: IAccountService)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/mikolajsemeniuk/Supreme-Go/entities"
)

// MockIAccountService is a mock of IAccountService interface.
type MockIAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountServiceMockRecorder
}

// MockIAccountServiceMockRecorder is the mock recorder for MockIAccountService.
type MockIAccountServiceMockRecorder struct {
	mock *MockIAccountService
}

// NewMockIAccountService creates a new mock instance.
func NewMockIAccountService(ctrl *gomock.Controller) *MockIAccountService {
	mock := &MockIAccountService{ctrl: ctrl}
	mock.recorder = &MockIAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountService) EXPECT() *MockIAccountServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIAccountService) Add(arg0 *entities.Account, arg1 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add.
func (mr *MockIAccountServiceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIAccountService)(nil).Add), arg0, arg1)
}

// All mocks base method.
func (m *MockIAccountService) All(arg0 chan []entities.Account) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "All", arg0)
}

// All indicates an expected call of All.
func (mr *MockIAccountServiceMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIAccountService)(nil).All), arg0)
}

// Remove mocks base method.
func (m *MockIAccountService) Remove(arg0 *entities.Account, arg1 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0, arg1)
}

// Remove indicates an expected call of Remove.
func (mr *MockIAccountServiceMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIAccountService)(nil).Remove), arg0, arg1)
}

// SingleById mocks base method.
func (m *MockIAccountService) SingleById(arg0 uuid.UUID, arg1 chan entities.Account) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SingleById", arg0, arg1)
}

// SingleById indicates an expected call of SingleById.
func (mr *MockIAccountServiceMockRecorder) SingleById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleById", reflect.TypeOf((*MockIAccountService)(nil).SingleById), arg0, arg1)
}

// Update mocks base method.
func (m *MockIAccountService) Update(arg0 uuid.UUID, arg1 *entities.Account, arg2 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1, arg2)
}

// Update indicates an expected call of Update.
func (mr *MockIAccountServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAccountService)(nil).Update), arg0, arg1, arg2)
}
